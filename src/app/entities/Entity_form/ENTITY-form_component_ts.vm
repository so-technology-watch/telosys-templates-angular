#parse("../../../../include/entitiesNamesRef.vm")
// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )

#set ( $LCentityName = $fn.uncapitalize($entity.name) )
#set ( $_entityService = "_" + $fn.uncapitalize($baseServiceName) )
import { $entity.name } from './../$fn.uncapitalize($LCentityNameModel)';
import { $baseServiceName } from './../services/$fn.uncapitalize($LCentityNameService)';
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';
#set($attrsFKs = [])
#foreach ($attribute in $entity.attributes)
#if ($attribute.isFK())
#if( $attrsFKs.add($attribute.referencedEntityName) )#end
#set($referencedEntity = $attribute.referencedEntityName)
import { ${referencedEntity} } from './../../${fn.uncapitalize($referencedEntity)}/${fn.uncapitalize($referencedEntity)}.model';
import { ${referencedEntity}Service } from './../../${fn.uncapitalize($referencedEntity)}/services/${fn.uncapitalize($referencedEntity)}.service';
#end
#end
import * as _ from 'underscore';

@Component({
  selector: 'app-${LCentityName}-form',
  templateUrl: './${LCentityName}-form.component.html',
  styleUrls: ['./${LCentityName}-form.component.css']
})
export class $formComponentName implements OnInit {

  private title = '${entity.name} Form';
  private $LCentityName: ${entity.name};
  private form: FormGroup;
  private ids;

#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
  // $entitiesFK Select
  private ${fn.uncapitalize($entitiesFK)}sData: ${entitiesFK}[];
  private selected${entitiesFK}Id: number;

#end
#end
  constructor(
#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
    private _${fn.uncapitalize($entitiesFK)}Service: ${entitiesFK}Service,
#end
#end
    private $_entityService: $baseServiceName,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService) { }

  ngOnInit() {
    this.getIdFromRouteParams();
#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
    this.fetch${entitiesFK}s();
#end
#end
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
  fetch${entitiesFK}s = () => {
    this._${fn.uncapitalize($entitiesFK)}Service.getAll().subscribe(
      (data: ${entitiesFK}[]) => this.${fn.uncapitalize($entitiesFK)}sData = data,
      error => console.error(error));
  }

#end
#end
  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }
  }

  getNewForm = (${LCentityName}?: ${entity}) => {
    return {
#set ( $validator = "" )
#foreach ( $attrib in $entity.attributes)
#if ($foreach.count < $entity.attributes.size())
#if ($attrib.isKeyElement() && $attrib.isFK())
      ${LCentityName}_${attrib.name}: [
        (${LCentityName} ? ${LCentityName}.${LCentityName}_${attrib.name} : ''),
        Validators.required
      ],
#elseif ($attrib.isKeyElement())
      ${LCentityName}_${attrib.name}: [{
        value: (${LCentityName} ? ${LCentityName}.${LCentityName}_${attrib.name} : ''),
        disabled: true
      }],
#else
      ${LCentityName}_${attrib.name}: [
#set ( $checkEntity = "(${LCentityName} ? ${LCentityName}.${LCentityName}_${attrib.name} : '')" )
#if ($attrib.isNotNull())
#set ( $checkEntity =  $checkEntity + "," )
#set ( $validator = "Validators.required" )
#end
        $checkEntity
#if ($validator != "")
        $validator
#end
      ],
#set ( $validator = "" )
#end
#else
#if ($attrib.isKeyElement() && $attrib.isFK())
      ${LCentityName}_${attrib.name}: [
        (${LCentityName} ? ${LCentityName}.${LCentityName}_${attrib.name} : ''),
        Validators.required
      ]
#elseif ($attrib.isKeyElement())
      ${LCentityName}_${attrib.name}: [{
        value: (${LCentityName} ? ${LCentityName}.${LCentityName}_${attrib.name} : ''),
        disabled: true
      }]
#else
      ${LCentityName}_${attrib.name}: [
#set ( $validator = "" )
#set ( $checkEntity = "(${LCentityName} ? ${LCentityName}.${LCentityName}_${attrib.name} : '')" )
#if ($attrib.isNotNull())
#set ( $checkEntity =  $checkEntity + "," )
#set ( $validator = "Validators.required" )
#end
        $checkEntity
#if ($validator != "")
        $validator
#end
      ]
#set ( $validator = "" )
#end
#end
#end
    };
  }


  load = () => {
    this.${_entityService}.getSingle(this.ids).subscribe(
      ($LCentityName: ${entity.name}) => {
        this.${LCentityName} = $LCentityName;
        this.form = this._formBuilder.group(this.getNewForm($LCentityName));
      },
      error => {
        if (error.message) {
          this._notificationService.error(error.message, 'Couldn\'t find the $LCentityName with the given id');
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  save = () => {
	// If we didn't get a ${LCentityName}, we are adding a ${LCentityName}
    if (!this.${LCentityName}) {
      this.add();
    } else { // If we didn't get a ${LCentityName}, we are adding a ${LCentityName}
      this.update();
    }
  }

  add = () => {
    this.${_entityService}.add(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', '${entity.name} added successfuly');
#set( $addVariables = "" )
#if ($entity.keyAttributesCount > 1)
#foreach ($keyAttrib in $entity.keyAttributes)
#if( $foreach.count < $entity.keyAttributes.size() )
#set( $addVariables = $addVariables + "this.form.value.${LCentityName}_${keyAttrib.name}, " )
#else
#set( $addVariables = $addVariables + "this.form.value.${LCentityName}_${keyAttrib.name}" )
#end
#end 
#else
	#set( $addVariables = "result.${LCentityName}_${entity.keyAttribute.name}" )
#end
        this._router.navigate(['./${LCentityName}-form', ${addVariables}]);
      },
      error => {
        if (error.message) {
          this._notificationService.error(error.message, '');
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
    this.${_entityService}.update(<${entity.name}>this.form.getRawValue()).subscribe(
      result => this._notificationService.success('Success', '${entity.name} edited successfuly'),
      error => {
        if (error.message) {
          this._notificationService.error(error.message, '');
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }
}
